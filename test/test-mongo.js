/**
 * Script de diagnostic et correction rapide MongoDB
 * Usage: node quick-fix.js
 */

require('dotenv').config();
const fs = require('fs');
const path = require('path');

console.log('üîß Diagnostic et Correction MongoDB\n');

// 1. V√©rifier les variables d'environnement
console.log('1. üìã V√©rification de la configuration:');
console.log('   NODE_ENV:', process.env.NODE_ENV || 'non d√©fini');
console.log('   PORT:', process.env.PORT || 'non d√©fini');
console.log('   MONGODB_URI:', process.env.MONGODB_URI ? 'd√©fini' : '‚ùå NON D√âFINI');

if (process.env.MONGODB_URI) {
  console.log('   URI masqu√©e:', process.env.MONGODB_URI.replace(/\/\/.@/, '//:*@'));
  
  if (process.env.MONGODB_URI.includes('mongodb.net')) {
    console.log('   üåê Type: MongoDB Atlas (Cloud)');
    console.log('   ‚ö†  Probl√®me potentiel: Connexion r√©seau/firewall');
  } else if (process.env.MONGODB_URI.includes('localhost')) {
    console.log('   üè† Type: MongoDB Local');
  }
}

// 2. Cr√©er un fichier .env corrig√©
console.log('\n2. üõ†  G√©n√©ration d\'un .env corrig√©...');

const envContent = `# Configuration de l'environnement - G√©n√©r√©e automatiquement
NODE_ENV=development
PORT=3000

# Base de donn√©es MongoDB
# Option recommand√©e pour le d√©veloppement local (√©vite les probl√®mes de r√©seau)
MONGODB_URI=mongodb://localhost:27017/covoiturage_db

# Si vous voulez utiliser MongoDB Atlas, d√©commentez la ligne ci-dessous
# et commentez celle du dessus
# MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/covoiturage_db?retryWrites=true&w=majority&connectTimeoutMS=30000&socketTimeoutMS=30000

# JWT Configuration
JWT_SECRET=covoiturage_super_secret_key_2024_development_very_long_and_secure
JWT_EXPIRE=7d
JWT_REFRESH_SECRET=covoiturage_refresh_secret_key_2024_different_from_access
JWT_REFRESH_EXPIRE=30d

# Configuration s√©curit√©
BCRYPT_ROUNDS=12
RATE_LIMIT_MAX=100
RATE_LIMIT_WINDOW=15

# Configuration de d√©veloppement (optionnel)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_password
EMAIL_FROM="CovoiturageApp <noreply@covoiturage.com>"

# Upload Configuration
MAX_FILE_SIZE=5242880
ALLOWED_IMAGE_TYPES=image/jpeg,image/png,image/webp
ALLOWED_DOCUMENT_TYPES=image/jpeg,image/png,application/pdf

# Frontend (pour CORS)
FRONTEND_URL=http://localhost:3000
`;

try {
  fs.writeFileSync('.env.backup', envContent);
  console.log('   ‚úÖ Fichier .env.backup cr√©√© avec la configuration recommand√©e');
  console.log('   üìù Pour l\'utiliser: mv .env.backup .env');
} catch (error) {
  console.error('   ‚ùå Erreur lors de la cr√©ation du fichier:', error.message);
}

// 3. V√©rifier l'installation de MongoDB local
console.log('\n3. üîç V√©rification de MongoDB local...');

const { exec } = require('child_process');

exec('mongod --version', (error, stdout, stderr) => {
  if (error) {
    console.log('   ‚ùå MongoDB n\'est pas install√© localement');
    console.log('\n   üí° Instructions d\'installation:');
    console.log('   Windows: choco install mongodb');
    console.log('            ou t√©l√©charger depuis https://www.mongodb.com/try/download/community');
    console.log('   macOS:   brew install mongodb-community');
    console.log('   Linux:   sudo apt-get install mongodb');
    console.log('\n   üöÄ Une fois install√©, d√©marrez avec: mongod');
  } else {
    console.log('   ‚úÖ MongoDB local trouv√©');
    console.log('   Version:', stdout.trim().split('\n')[0]);
    
    // Tester la connexion locale
    exec('mongo --eval "db.runCommand({ping: 1})" --quiet', (pingError, pingStdout) => {
      if (pingError) {
        console.log('   ‚ö†  MongoDB install√© mais non d√©marr√©');
        console.log('   üöÄ Pour d√©marrer: mongod');
      } else {
        console.log('   ‚úÖ MongoDB local d√©marr√© et accessible');
      }
    });
  }
});

// 4. Cr√©er un fichier de configuration DB am√©lior√©
console.log('\n4. üìÅ G√©n√©ration du fichier config/db.js am√©lior√©...');

const dbConfigContent = `/**
 * Configuration MongoDB avec gestion d'erreurs robuste
 * G√©n√©r√© automatiquement par quick-fix.js
 */

const mongoose = require('mongoose');
require('dotenv').config();

const connectDB = async () => {
  try {
    const options = {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      connectTimeoutMS: 20000,
      socketTimeoutMS: 45000,
      serverSelectionTimeoutMS: 20000,
      maxPoolSize: 10,
      minPoolSize: 2,
      heartbeatFrequencyMS: 10000,
      retryWrites: true,
      bufferCommands: false,
      bufferMaxEntries: 0,
    };

    console.log('üîÑ Connexion √† MongoDB...');
    
    const conn = await mongoose.connect(process.env.MONGODB_URI, options);
    
    console.log(\`‚úÖ MongoDB connect√©: \${conn.connection.host}\`);
    return conn;

  } catch (error) {
    console.error('‚ùå Erreur MongoDB:', error.message);
    
    if (error.message.includes('ETIMEOUT')) {
      console.error('üí° Solution: Utilisez MongoDB local ou v√©rifiez votre r√©seau');
    }
    
    if (error.message.includes('ECONNREFUSED')) {
      console.error('üí° Solution: D√©marrez MongoDB local avec "mongod"');
    }
    
    process.exit(1);
  }
};

// √âv√©nements de connexion
mongoose.connection.on('connected', () => {
  console.log('üì° Mongoose connect√©');
});

mongoose.connection.on('error', (err) => {
  console.error('‚ùå Erreur MongoDB:', err.message);
});

mongoose.connection.on('disconnected', () => {
  console.log('üîå Mongoose d√©connect√©');
});

process.on('SIGINT', async () => {
  await mongoose.connection.close();
  console.log('üîí Connexion ferm√©e');
  process.exit(0);
});

module.exports = connectDB;
`;

try {
  if (!fs.existsSync('config')) {
    fs.mkdirSync('config');
  }
  fs.writeFileSync('config/db-improved.js', dbConfigContent);
  console.log('   ‚úÖ Fichier config/db-improved.js cr√©√©');
  console.log('   üìù Pour l\'utiliser: mv config/db-improved.js config/db.js');
} catch (error) {
  console.error('   ‚ùå Erreur:', error.message);
}

// 5. Instructions finales
console.log('\nüéØ INSTRUCTIONS DE CORRECTION:');
console.log('1. Copiez la configuration recommand√©e:');
console.log('   mv .env.backup .env');
console.log('2. Si vous n\'avez pas MongoDB local, installez-le:');
console.log('   Windows: choco install mongodb');
console.log('   macOS:   brew install mongodb-community');
console.log('   Linux:   sudo apt-get install mongodb');
console.log('3. D√©marrez MongoDB local:');
console.log('   mongod');
console.log('4. Utilisez la configuration DB am√©lior√©e:');
console.log('   mv config/db-improved.js config/db.js');
console.log('5. Red√©marrez votre serveur:');
console.log('   npm run dev');
console.log('\n‚ú® Cette configuration √©liminera les erreurs de timeout!');