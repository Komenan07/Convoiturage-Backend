// app.js - Configuration principale de l'application
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const helmet = require('helmet');
const compression = require('compression');
const cookieParser = require('cookie-parser');
require('dotenv').config();

// Import des routes
const messageRoutes = require('./routes/messageRoutes');
const authRoutes = require('./routes/authRoutes');
const conversationRoutes = require('./routes/conversationRoutes');

const app = express();

// ===========================================
// CONFIGURATION MONGODB
// ===========================================

mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {
  console.log('‚úÖ Connexion MongoDB √©tablie');
})
.catch((error) => {
  console.error('‚ùå Erreur connexion MongoDB:', error);
  process.exit(1);
});

// ===========================================
// MIDDLEWARES GLOBAUX
// ===========================================

// S√©curit√©
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
}));

// CORS
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Parsing
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

// Compression
app.use(compression());

// Logging des requ√™tes
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path} - IP: ${req.ip}`);
  next();
});

// ===========================================
// ROUTES
// ===========================================

app.use('/api/auth', authRoutes);
app.use('/api/messages', messageRoutes);
app.use('/api/conversations', conversationRoutes);

// Route de test
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version || '1.0.0'
  });
});

// ===========================================
// WEBSOCKET POUR TEMPS R√âEL (optionnel)
// ===========================================

const http = require('http');
const socketIo = require('socket.io');

const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: process.env.FRONTEND_URL || 'http://localhost:3000',
    methods: ['GET', 'POST']
  }
});

// Gestion des connexions WebSocket
io.use(async (socket, next) => {
  try {
    const token = socket.handshake.auth.token;
    const jwt = require('jsonwebtoken');
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    
    const Utilisateur = require('./models/Utilisateur');
    const utilisateur = await Utilisateur.findById(decoded.id);
    
    if (!utilisateur) {
      return next(new Error('Utilisateur non trouv√©'));
    }
    
    socket.utilisateur = utilisateur;
    next();
  } catch (error) {
    next(new Error('Authentification WebSocket √©chou√©e'));
  }
});

io.on('connection', (socket) => {
  console.log(`Utilisateur connect√©: ${socket.utilisateur.email}`);
  
  // Rejoindre les salles de conversation
  socket.on('rejoindre-conversation', (conversationId) => {
    socket.join(`conversation-${conversationId}`);
    console.log(`Utilisateur ${socket.utilisateur.email} a rejoint la conversation ${conversationId}`);
  });
  
  // Quitter une conversation
  socket.on('quitter-conversation', (conversationId) => {
    socket.leave(`conversation-${conversationId}`);
  });
  
  // Envoyer un message en temps r√©el
  socket.on('nouveau-message', (data) => {
    socket.to(`conversation-${data.conversationId}`).emit('message-recu', {
      ...data,
      expediteur: {
        id: socket.utilisateur._id,
        nom: socket.utilisateur.nom,
        prenom: socket.utilisateur.prenom
      }
    });
  });
  
  // Notification de frappe
  socket.on('frappe', (data) => {
    socket.to(`conversation-${data.conversationId}`).emit('utilisateur-frappe', {
      utilisateurId: socket.utilisateur._id,
      nom: socket.utilisateur.nom
    });
  });
  
  socket.on('disconnect', () => {
    console.log(`Utilisateur d√©connect√©: ${socket.utilisateur.email}`);
  });
});

// ===========================================
// GESTION D'ERREURS GLOBALE
// ===========================================

app.use((err, req, res, next) => {
  console.error('Erreur globale:', err);
  
  res.status(err.status || 500).json({
    succes: false,
    erreur: 'Erreur interne du serveur',
    details: process.env.NODE_ENV === 'development' ? err.message : undefined,
    timestamp: new Date().toISOString()
  });
});

// Route 404
app.use('*', (req, res) => {
  res.status(404).json({
    succes: false,
    erreur: 'Route non trouv√©e',
    path: req.originalUrl,
    method: req.method
  });
});

// ===========================================
// D√âMARRAGE DU SERVEUR
// ===========================================

const PORT = process.env.PORT || 5000;

server.listen(PORT, () => {
  console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
  console.log(`üì± API Messages disponible sur: http://localhost:${PORT}/api/messages`);
  console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
});

// Gestion propre de l'arr√™t du serveur
process.on('SIGTERM', () => {
  console.log('SIGTERM re√ßu, arr√™t propre du serveur...');
  server.close(() => {
    mongoose.connection.close(false, () => {
      console.log('Connexion MongoDB ferm√©e');
      process.exit(0);
    });
  });
});

module.exports = app;

// ===========================================
// EXEMPLES D'UTILISATION DES ROUTES
// ===========================================

/*

# EXEMPLES DE REQU√äTES CURL

## 1. Envoyer un message texte
curl -X POST http://localhost:5000/api/messages/texte \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -d '{
    "conversationId": "60d5ecb54b24c17b8c8b4567",
    "destinataireId": "60d5ecb54b24c17b8c8b4568",
    "contenu": "Salut ! Comment √ßa va ?"
  }'

## 2. Envoyer une position GPS
curl -X POST http://localhost:5000/api/messages/position \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -d '{
    "conversationId": "60d5ecb54b24c17b8c8b4567",
    "destinataireId": "60d5ecb54b24c17b8c8b4568",
    "longitude": 2.3522,
    "latitude": 48.8566,
    "contenu": "Ma position actuelle"
  }'

## 3. Utiliser un mod√®le pr√©d√©fini
curl -X POST http://localhost:5000/api/messages/modele \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -d '{
    "conversationId": "60d5ecb54b24c17b8c8b4567",
    "destinataireId": "60d5ecb54b24c17b8c8b4568",
    "modeleUtilise": "salutation-matin",
    "contenu": "Bonjour ! J'\''esp√®re que vous passez une excellente journ√©e."
  }'

## 4. R√©cup√©rer les messages d'une conversation
curl -X GET "http://localhost:5000/api/messages/conversation/60d5ecb54b24c17b8c8b4567?page=1&limite=20" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"

## 5. Rechercher dans les messages
curl -X GET "http://localhost:5000/api/messages/recherche?q=bonjour&page=1" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"

## 6. Obtenir les messages non lus
curl -X GET http://localhost:5000/api/messages/non-lus \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"

## 7. Marquer un message comme lu
curl -X PUT http://localhost:5000/api/messages/60d5ecb54b24c17b8c8b4569/lu \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"

## 8. Marquer une conversation comme lue
curl -X PUT http://localhost:5000/api/messages/conversation/60d5ecb54b24c17b8c8b4567/lu \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"

## 9. Signaler un message
curl -X PUT http://localhost:5000/api/messages/60d5ecb54b24c17b8c8b4569/signaler \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -d '{
    "motifSignalement": "SPAM"
  }'

## 10. Supprimer un message
curl -X DELETE http://localhost:5000/api/messages/60d5ecb54b24c17b8c8b4569 \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"

## 11. Obtenir les statistiques
curl -X GET "http://localhost:5000/api/messages/statistiques?periode=30" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"

## 12. Recherche g√©ospatiale
curl -X GET "http://localhost:5000/api/messages/proximite?longitude=2.3522&latitude=48.8566&rayon=5" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN"

*/

// ===========================================
// VARIABLES D'ENVIRONNEMENT REQUISES (.env)
// ===========================================

/*

# Configuration MongoDB
MONGODB_URI=mongodb://localhost:27017/votre-db-messages

# Configuration JWT
JWT_SECRET=votre-secret-jwt-ultra-securise-256-bits
JWT_EXPIRES_IN=7d

# Configuration serveur
PORT=5000
NODE_ENV=development

# Configuration CORS
FRONTEND_URL=http://localhost:3000

# Configuration de fichiers (si upload d'images)
UPLOAD_DIR=uploads/
MAX_FILE_SIZE=5242880

# Configuration email (pour notifications)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=votre-email@gmail.com
SMTP_PASS=votre-mot-de-passe-app

*/