// services/trajetService.js

const Trajet = require('../models/Trajet');
const { logger } = require('../utils/logger');

/**
 * Service de gestion de l'expiration des trajets
 * 
 * Ce service g√®re automatiquement:
 * - L'expiration des trajets dont la date est pass√©e
 * - L'expiration des r√©currences termin√©es
 * - Le nettoyage des vieux trajets expir√©s
 * - Les notifications avant expiration
 */

// ===============================================
// CONSTANTES DE CONFIGURATION
// ===============================================

const CONFIG = {
  // Dur√©e de conservation des trajets expir√©s (en jours)
  JOURS_CONSERVATION_DEFAUT: 30,
  
  // D√©lai de notification avant expiration (en heures)
  HEURES_NOTIFICATION_DEFAUT: 2,
  
  // Timeout de la maintenance pour √©viter les blocages (en minutes)
  TIMEOUT_MAINTENANCE_MS: 15 * 60 * 1000, // 15 minutes
  
  // Nombre maximum de tentatives en cas d'√©chec
  MAX_RETRY_ATTEMPTS: 3,
  
  // D√©lai entre les tentatives (en ms)
  RETRY_DELAY_MS: 2000
};

// ===============================================
// CLASSE PRINCIPALE
// ===============================================

class TrajetExpirationService {
  constructor() {
    this.isRunning = false;
    this.lastRunTime = null;
    this.maintenanceStartTime = null;
    this.stats = {
      totalExpired: 0,
      totalRecurrencesExpired: 0,
      totalCleaned: 0,
      totalNotifications: 0,
      lastRun: null,
      successfulRuns: 0,
      failedRuns: 0
    };
  }

  // ===============================================
  // M√âTHODES UTILITAIRES
  // ===============================================

  /**
   * Valider un param√®tre num√©rique
   * @private
   */
  _validateNumber(value, min, max, paramName) {
    if (typeof value !== 'number' || isNaN(value)) {
      throw new Error(`${paramName} doit √™tre un nombre valide`);
    }
    if (value < min || value > max) {
      throw new Error(`${paramName} doit √™tre entre ${min} et ${max}`);
    }
    return true;
  }

  /**
   * V√©rifier si la maintenance est bloqu√©e (timeout)
   * @private
   */
  _checkMaintenanceTimeout() {
    if (this.isRunning && this.maintenanceStartTime) {
      const elapsed = Date.now() - this.maintenanceStartTime;
      if (elapsed > CONFIG.TIMEOUT_MAINTENANCE_MS) {
        logger.error('‚ö†Ô∏è Maintenance bloqu√©e d√©tect√©e - R√©initialisation forc√©e');
        this.isRunning = false;
        this.maintenanceStartTime = null;
        return true;
      }
    }
    return false;
  }

  /**
   * Ex√©cuter une op√©ration avec retry
   * @private
   */
  async _executeWithRetry(operation, operationName, maxRetries = CONFIG.MAX_RETRY_ATTEMPTS) {
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        return await operation();
      } catch (error) {
        lastError = error;
        logger.warn(`‚ö†Ô∏è ${operationName} - Tentative ${attempt}/${maxRetries} √©chou√©e:`, error.message);
        
        if (attempt < maxRetries) {
          // Attendre avant de r√©essayer
          await new Promise(resolve => setTimeout(resolve, CONFIG.RETRY_DELAY_MS * attempt));
        }
      }
    }
    
    // Si toutes les tentatives ont √©chou√©
    throw new Error(`${operationName} a √©chou√© apr√®s ${maxRetries} tentatives: ${lastError.message}`);
  }

  // ===============================================
  // M√âTHODES PRINCIPALES
  // ===============================================

  /**
   * V√©rifier et marquer tous les trajets expir√©s
   * @returns {Promise<Object>} R√©sultat de l'op√©ration
   */
  async verifierTrajetsExpires() {
    try {
      logger.info('üîç V√©rification des trajets expir√©s...');

      // Marquer les trajets ponctuels expir√©s avec retry
      const resultTrajets = await this._executeWithRetry(
        () => Trajet.marquerTrajetsExpires(),
        'Marquage des trajets expir√©s'
      );
      
      // Marquer les r√©currences expir√©es avec retry
      const resultRecurrences = await this._executeWithRetry(
        () => Trajet.marquerRecurrencesExpirees(),
        'Marquage des r√©currences expir√©es'
      );

      // Mettre √† jour les statistiques
      this.stats.totalExpired += resultTrajets.modifiedCount || 0;
      this.stats.totalRecurrencesExpired += resultRecurrences.modifiedCount || 0;
      this.stats.lastRun = new Date();

      logger.info(`‚úÖ Trajets expir√©s: ${resultTrajets.modifiedCount || 0}`);
      logger.info(`‚úÖ R√©currences expir√©es: ${resultRecurrences.modifiedCount || 0}`);

      return {
        success: true,
        trajetsExpires: resultTrajets.modifiedCount || 0,
        recurrencesExpirees: resultRecurrences.modifiedCount || 0,
        timestamp: new Date()
      };
    } catch (error) {
      logger.error('‚ùå Erreur lors de la v√©rification des trajets expir√©s:', error);
      throw error;
    }
  }

  /**
   * Nettoyer les vieux trajets expir√©s
   * @param {number} joursAGarder - Nombre de jours √† garder les trajets expir√©s (d√©faut: 30)
   * @returns {Promise<Object>} R√©sultat de l'op√©ration
   */
  async nettoyerVieuxTrajets(joursAGarder = CONFIG.JOURS_CONSERVATION_DEFAUT) {
    try {
      // Validation des param√®tres
      this._validateNumber(joursAGarder, 1, 365, 'joursAGarder');

      logger.info(`üßπ Nettoyage des trajets expir√©s depuis plus de ${joursAGarder} jours...`);

      // Ex√©cuter le nettoyage avec retry
      const result = await this._executeWithRetry(
        () => Trajet.nettoyerVieuxTrajetsExpires(joursAGarder),
        'Nettoyage des vieux trajets'
      );

      this.stats.totalCleaned += result.deletedCount || 0;

      logger.info(`‚úÖ ${result.deletedCount || 0} vieux trajets supprim√©s`);

      return {
        success: true,
        trajetsSupprim√©s: result.deletedCount || 0,
        joursAGarder,
        timestamp: new Date()
      };
    } catch (error) {
      logger.error('‚ùå Erreur lors du nettoyage des vieux trajets:', error);
      throw error;
    }
  }

  /**
   * Obtenir les statistiques d'expiration
   * @returns {Promise<Object>} Statistiques compl√®tes
   */
  async obtenirStatistiques() {
    try {
      const dbStats = await Trajet.getStatistiquesExpiration();
      
      return {
        database: dbStats,
        service: {
          ...this.stats,
          isRunning: this.isRunning,
          lastRunTime: this.lastRunTime,
          uptime: this.lastRunTime ? Date.now() - this.lastRunTime : 0
        },
        timestamp: new Date()
      };
    } catch (error) {
      logger.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
      throw error;
    }
  }

  /**
   * Trouver les trajets qui vont expirer bient√¥t
   * @param {number} heures - Nombre d'heures avant expiration (d√©faut: 2)
   * @returns {Promise<Array>} Liste des trajets
   */
  async trouverTrajetsAExpirer(heures = CONFIG.HEURES_NOTIFICATION_DEFAUT) {
    try {
      // Validation des param√®tres
      this._validateNumber(heures, 0.5, 72, 'heures');

      const trajets = await Trajet.findTrajetsAExpirer(heures);
      
      logger.info(`üìã ${trajets.length} trajet(s) vont expirer dans ${heures}h`);
      
      return trajets;
    } catch (error) {
      logger.error('‚ùå Erreur lors de la recherche des trajets √† expirer:', error);
      throw error;
    }
  }

  /**
   * Notifier les conducteurs des trajets sur le point d'expirer
   * @param {number} heures - Nombre d'heures avant expiration (d√©faut: 2)
   * @returns {Promise<Object>} R√©sultat des notifications
   */
  async notifierTrajetsAExpirer(heures = CONFIG.HEURES_NOTIFICATION_DEFAUT) {
    try {
      const trajets = await this.trouverTrajetsAExpirer(heures);

      if (trajets.length === 0) {
        logger.info('‚úÖ Aucun trajet √† notifier');
        return { 
          success: true, 
          notificationsSent: 0,
          trajetsNotifies: 0,
          timestamp: new Date()
        };
      }

      // Grouper par conducteur
      const conducteurs = new Map();
      trajets.forEach(trajet => {
        const conducteurId = trajet.conducteurId.toString();
        if (!conducteurs.has(conducteurId)) {
          conducteurs.set(conducteurId, []);
        }
        conducteurs.get(conducteurId).push(trajet);
      });

      // TODO: Impl√©menter l'envoi de notifications
      // Options possibles:
      // - Email via nodemailer
      // - SMS via Twilio
      // - Push notifications
      // - Webhooks
      
      // Pour l'instant, juste logger
      logger.info(`üìß ${conducteurs.size} conducteur(s) √† notifier pour ${trajets.length} trajet(s)`);
      
      // Exemple d'impl√©mentation future:
      /*
      const notificationPromises = [];
      for (const [conducteurId, trajetsConducteur] of conducteurs) {
        notificationPromises.push(
          this._envoyerNotification(conducteurId, trajetsConducteur)
        );
      }
      await Promise.allSettled(notificationPromises);
      */

      this.stats.totalNotifications += conducteurs.size;

      return {
        success: true,
        notificationsSent: conducteurs.size,
        trajetsNotifies: trajets.length,
        heuresAvantExpiration: heures,
        timestamp: new Date()
      };
    } catch (error) {
      logger.error('‚ùå Erreur lors de la notification des trajets:', error);
      throw error;
    }
  }

  /**
   * Ex√©cuter toutes les t√¢ches de maintenance
   * @param {Object} options - Options de maintenance
   * @returns {Promise<Object>} R√©sultat de la maintenance
   */
  async executerMaintenance(options = {}) {
    // V√©rifier si une maintenance est d√©j√† en cours
    this._checkMaintenanceTimeout();

    if (this.isRunning) {
      logger.warn('‚ö†Ô∏è Une maintenance est d√©j√† en cours');
      return { 
        success: false, 
        message: 'Maintenance d√©j√† en cours',
        startedAt: this.maintenanceStartTime
      };
    }

    try {
      this.isRunning = true;
      this.lastRunTime = new Date();
      this.maintenanceStartTime = Date.now();

      // Options par d√©faut
      const {
        verifierExpiration = true,
        notifier = true,
        nettoyer = true,
        joursConservation = CONFIG.JOURS_CONSERVATION_DEFAUT,
        heuresNotification = CONFIG.HEURES_NOTIFICATION_DEFAUT
      } = options;

      logger.info('üöÄ D√©but de la maintenance des trajets');
      logger.info(`‚öôÔ∏è Options: expiration=${verifierExpiration}, notification=${notifier}, nettoyage=${nettoyer}`);

      const resultats = {};

      // 1. V√©rifier et marquer les trajets expir√©s
      if (verifierExpiration) {
        resultats.expiration = await this.verifierTrajetsExpires();
      }

      // 2. Notifier les trajets qui vont expirer
      if (notifier) {
        resultats.notification = await this.notifierTrajetsAExpirer(heuresNotification);
      }

      // 3. Nettoyer les vieux trajets
      if (nettoyer) {
        resultats.nettoyage = await this.nettoyerVieuxTrajets(joursConservation);
      }

      // 4. Obtenir les statistiques
      resultats.statistiques = await this.obtenirStatistiques();

      // Mettre √† jour les statistiques de succ√®s
      this.stats.successfulRuns++;

      const executionTime = Date.now() - this.maintenanceStartTime;
      logger.info(`‚úÖ Maintenance termin√©e avec succ√®s en ${executionTime}ms`);

      return {
        success: true,
        executionTime,
        timestamp: new Date(),
        resultats
      };
    } catch (error) {
      this.stats.failedRuns++;
      logger.error('‚ùå Erreur lors de la maintenance:', error);
      
      return {
        success: false,
        error: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,
        timestamp: new Date()
      };
    } finally {
      this.isRunning = false;
      this.maintenanceStartTime = null;
    }
  }

  /**
   * Planifier une maintenance automatique
   * @param {number} intervalMs - Intervalle en millisecondes
   * @returns {NodeJS.Timeout} ID de l'intervalle
   */
  planifierMaintenance(intervalMs = 60 * 60 * 1000) { // D√©faut: 1 heure
    logger.info(`‚è∞ Maintenance planifi√©e toutes les ${intervalMs / 1000 / 60} minutes`);
    
    // Ex√©cuter imm√©diatement
    this.executerMaintenance();
    
    // Puis ex√©cuter p√©riodiquement
    return setInterval(() => {
      this.executerMaintenance();
    }, intervalMs);
  }

  /**
   * Obtenir l'√©tat du service
   * @returns {Object} √âtat actuel du service
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      lastRunTime: this.lastRunTime,
      maintenanceStartTime: this.maintenanceStartTime,
      uptime: this.maintenanceStartTime ? Date.now() - this.maintenanceStartTime : 0,
      stats: { ...this.stats },
      config: { ...CONFIG },
      timestamp: new Date()
    };
  }

  /**
   * R√©initialiser les statistiques
   */
  resetStats() {
    const oldStats = { ...this.stats };
    
    this.stats = {
      totalExpired: 0,
      totalRecurrencesExpired: 0,
      totalCleaned: 0,
      totalNotifications: 0,
      lastRun: null,
      successfulRuns: 0,
      failedRuns: 0
    };
    
    logger.info('‚úÖ Statistiques r√©initialis√©es', { old: oldStats, new: this.stats });
    
    return oldStats;
  }

  /**
   * V√©rifier la sant√© du service
   * @returns {Object} √âtat de sant√©
   */
  healthCheck() {
    const isHealthy = !this._checkMaintenanceTimeout() && (
      !this.lastRunTime || 
      (Date.now() - this.lastRunTime < 24 * 60 * 60 * 1000) // Derni√®re ex√©cution < 24h
    );

    return {
      healthy: isHealthy,
      status: isHealthy ? 'OK' : 'WARNING',
      isRunning: this.isRunning,
      lastRunTime: this.lastRunTime,
      timeSinceLastRun: this.lastRunTime ? Date.now() - this.lastRunTime : null,
      stats: this.stats,
      timestamp: new Date()
    };
  }
}

// ===============================================
// EXPORT SINGLETON
// ===============================================

const trajetExpirationService = new TrajetExpirationService();

module.exports = trajetExpirationService;